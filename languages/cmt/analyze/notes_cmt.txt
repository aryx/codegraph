# -*- org -*-

* compared to Ast_ml?
Comparing Graph_code_ml and Graph_code_cmt?

- need module lookup? names are resolved? hmmm apparently not completly.
  'open' is handled but still have to resolve module aliases.
  Moreover you also need to handle local modules.
- need type lookup? again type aliases are not resolved.

- multiple parameters? everything is curried (fun x y --> fun x -> fun y)
    so this is good

* about Path.t

Path.t elements in the typed AST are actually not always full absolute
paths (see open_module.cmt). For entities defined outside, you have
the full path (but you still have to resolve aliases for those
though). Moreover when you do open X, the typed AST contain a path
mentionning X for entities coming from X, which is good. But when you
refer to an entity from a local module, a local type, a local element,
then you don't have the full path, just the path relative to the
current module. So you want to prepend also the current module (and
nested module) to get a complete full path before doing anything.

Why they didn't put the full path? Because there is no unicity inside
a module for an entity or module. You can do

module X = struct ... end
module X = struct ... end
let f x =...
let f x = ... f x

so a full path will not be enough, you would also need an arbitrary
integer or a location to disambiguate, so they just abuse the scope
to solve such ambiguity by using relative path.

* Path.t vs LongIdent.t

Prefer to use Path.t as at least they Path.t have external open
resolved. Use LongIdent.t when you just need the last part of the name.

* about entities

Type definitions can only appear at the toplevel of a module.
Values can be referenced only if they appear at the toplevel.
